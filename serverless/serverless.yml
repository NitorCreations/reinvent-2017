# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-nodejs # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  environment:
    APPROVED_ALERTS_TABLE:
      Ref: DDBTableApproved
    NOT_APPROVED_ALERTS_TABLE:
      Ref: DDBTableNotApproved
    IMAGES_BUCKET:
      Ref: ImagesBucket

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PubObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - Fn::GetAtt: [ImagesBucket, Arn]
            - "/*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        Fn::GetAtt: [ImagesBucket, Arn]
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "dax:*"
        - "cloudwatch:DeleteAlarms"
        - "cloudwatch:DescribeAlarmHistory"
        - "cloudwatch:DescribeAlarms"
        - "cloudwatch:DescribeAlarmsForMetric"
        - "cloudwatch:GetMetricStatistics"
        - "cloudwatch:ListMetrics"
        - "cloudwatch:PutMetricAlarm"
        - "iam:GetRole"
        - "iam:ListRoles"
        - "sns:*"
        - "lambda:CreateFunction"
        - "lambda:ListFunctions"
        - "lambda:ListEventSourceMappings"
        - "lambda:CreateEventSourceMapping"
        - "lambda:DeleteEventSourceMapping"
        - "lambda:GetFunctionConfiguration"
        - "lambda:DeleteFunction"
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  inputApi:
    handler: inputApi.createAlert
    events:
      - http:
          path: alert/create
          method: post
  inputImage:
    handler: inputApi.linkImage
    events:
      - http:
          path: alert/image
          method: post

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DDBTableNotApproved:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DDBTableApproved:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ImagesBucket:
      Type: AWS::S3::Bucket
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          InviteMessageTemplate:
            EmailMessage: "Your username is {username} and temporary password is {####}."
            EmailSubject: "Your temporary password"
            SMSMessage: "Your username is {username} and temporary password is {####}. "
          UnusedAccountValidityDays: 7 
        AliasAttributes: [preferred_username, email]
        AutoVerifiedAttributes: [ email ]
        UserPoolName: ${opt:stage}-fia
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${opt:stage}-fia-userclient,
        ExplicitAuthFlows: 
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${opt:stage}fia
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders: 
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              'Fn::GetAtt': [ UserPool, ProviderName]
    IdentityPoolIAMRole:
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - 
              Sid: ""
              Effect: "Allow"
              Principal: 
                Federated: cognito-identity.amazonaws.com
              Action: "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Fn::Join:
                      - ""
                      - - ""
                        - Ref: IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: "authenticated"
        Path: "/"
        Policies:
          - PolicyName: ${opt:stage}-fia-authenticated
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Scan"
                    - "dynamodb:Query"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - {'Fn::GetAtt': [DDBTableApproved, Arn]}
                    - {'Fn::GetAtt': [DDBTableNotApproved, Arn]}
        RoleName: ${opt:stage}fia-authenticated
    
    FrontendBucket:
      Type: AWS::S3::Bucket
#    CloudFrontDistribution:
#      Type: AWS::CloudFront::Distribution
#      Properties:
#        DistributionConfig:
#          Origins:
#          - DomainName:
#              Fn:GetAtt: [FrontendBucket, DomainName]
#            Id: myS3Origin
#            S3OriginConfig:
#              OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
#          Enabled: 'true'
#          DefaultRootObject: index.html
#          Aliases:
#          - mysite.example.com
#          - yoursite.example.com
#          DefaultCacheBehavior:
#            AllowedMethods:
#            - GET
#            TargetOriginId: myS3Origin
#            ForwardedValues:
#              QueryString: 'false'
#              Cookies:
#                Forward: none
#            ViewerProtocolPolicy: allow-all

  Outputs:
    IdentityPoolId:
      Description: "The IdentityPool"
      Value:
        Ref: IdentityPool
    UserPoolId:
      Description: "The UserPoolId"
      Value:
        Ref: UserPool
    ClientId:
      Description: "The Client id"
      Value:
        Ref: UserPoolClient
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
